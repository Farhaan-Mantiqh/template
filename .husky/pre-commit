#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Bordered UI functions
print_boxed_message() {
  echo "┌────────────────────────────────────────────┐"
  echo "│ 🚀 Husky Pre-commit Hook                   │"
  echo "├────────────────────────────────────────────┤"
  echo "│ 🧼 Running lint-staged (ESLint + Prettier) │"
  echo "└────────────────────────────────────────────┘"
}

print_success_box() {
  echo ""
  echo "┌────────────────────────────────────────────┐"
  echo "│ ✅ All good! Pre-commit checks passed.     │"
  echo "└────────────────────────────────────────────┘"
}

print_fail_box() {
  echo ""
  echo "┌────────────────────────────────────────────┐"
  echo "│ ❌ Lint errors detected!                   │"
  echo "│ 💡 Please fix them before committing.      │"
  echo "└────────────────────────────────────────────┘"
}

print_commit_msg_header() {
  echo ""
  echo "┌────────────────────────────────────────────┐"
  echo "│ 🧾 Validating commit message format        │"
  echo "└────────────────────────────────────────────┘"
}

print_commit_passed() {
  echo ""
  echo "┌────────────────────────────────────────────┐"
  echo "│ ✅ Commit message is valid.                │"
  echo "└────────────────────────────────────────────┘"
}

print_commit_failed() {
  echo ""
  echo "┌────────────────────────────────────────────┐"
  echo "│ ❌ Invalid commit message format!          │"
  echo "│ 💡 Use format: type: description           │"
  echo "│ ✏️  Example: feat: add login endpoint       │"
  echo "└────────────────────────────────────────────┘"
}

# Step 1: Lint check
echo ""
print_boxed_message
echo ""
pnpm lint-staged
LINT_EXIT_CODE=$?

if [ $LINT_EXIT_CODE -ne 0 ]; then
  print_fail_box
  exit 1
fi

# Step 2: Commit message validation
print_commit_msg_header

COMMIT_MSG_FILE=$(cat .git/COMMIT_EDITMSG)

echo "$COMMIT_MSG_FILE" | npx --no-install commitlint

if [ $? -eq 0 ]; then
  print_commit_passed
else
  print_commit_failed
  exit 1
fi

# Done
print_success_box
